// 游戏配置
const GRID_SIZE = 8;           // 8x8网格
const CELL_SIZE = 45;          // 每个格子大小
const COLORS = [               // 宝石颜色
  '#FF6B6B',  // 红色
  '#4ECDC4',  // 青色
  '#45B7D1',  // 蓝色
  '#FFA07A',  // 橙色
  '#98D8C8',  // 绿色
  '#F7DC6F'   // 黄色
];

// 特殊宝石类型
const SPECIAL_GEMS = {
  NORMAL: 0,
  FIRECRACKER: 10  // 炮竹从10开始编号，避免与普通宝石冲突
};

export default class Main {
  constructor() {
    this.canvas = wx.createCanvas();
    this.ctx = this.canvas.getContext('2d');
    
    // 获取屏幕尺寸
    const { windowWidth, windowHeight } = wx.getSystemInfoSync();
    this.canvas.width = windowWidth;
    this.canvas.height = windowHeight;
    
    // 游戏状态
    this.grid = [];
    this.selectedCell = null;
    this.score = 0;
    this.isAnimating = false;
    this.invalidSwapEffect = null; // 用于显示无效交换效果
    this.particles = []; // 粒子效果数组
    this.fallingGems = []; // 下落中的宝石数组
    this.swappingGems = []; // 交换中的宝石数组
    this.firecrackerEffects = []; // 炮竹爆炸效果数组
    
    // 计算游戏区域偏移，使其居中
    this.offsetX = (windowWidth - GRID_SIZE * CELL_SIZE) / 2;
    this.offsetY = (windowHeight - GRID_SIZE * CELL_SIZE) / 2 - 50;
    
    // 初始化游戏
    this.initGame();
    this.bindEvents();
    this.gameLoop();
  }
  
  // 初始化游戏网格
  initGame() {
    this.grid = [];
    for (let i = 0; i < GRID_SIZE; i++) {
      this.grid[i] = [];
      for (let j = 0; j < GRID_SIZE; j++) {
        this.grid[i][j] = this.getRandomGem();
      }
    }
    
    // 确保初始状态没有现成的消除组合
    this.removeInitialMatches();
  }
  
  // 获取随机宝石
  getRandomGem() {
    return Math.floor(Math.random() * COLORS.length);
  }
  
  // 移除初始的消除组合
  removeInitialMatches() {
    let hasMatches = true;
    while (hasMatches) {
      const matches = this.findMatches();
      if (matches.length > 0) {
        // 重新生成有消除的位置
        matches.forEach(({row, col}) => {
          this.grid[row][col] = this.getRandomGem();
        });
      } else {
        hasMatches = false;
      }
    }
  }
  
  // 查找消除组合（增强版，支持检测4连及以上）
  findMatches() {
    const matches = [];
    const fourMatches = []; // 存储4连消除信息
    
    // 检查水平消除
    for (let i = 0; i < GRID_SIZE; i++) {
      let count = 1;
      let currentColor = this.grid[i][0];
      let startCol = 0;
      
      for (let j = 1; j < GRID_SIZE; j++) {
        if (this.grid[i][j] === currentColor && currentColor < COLORS.length) { // 只匹配普通宝石
          count++;
        } else {
          if (count >= 3 && currentColor < COLORS.length) {
            const matchPositions = [];
            for (let k = startCol; k < startCol + count; k++) {
              matchPositions.push({row: i, col: k});
            }
            matches.push(...matchPositions);
            
            // 检查是否是4连消除
            if (count === 4) {
              fourMatches.push({
                type: 'horizontal',
                positions: matchPositions,
                centerPos: {row: i, col: startCol + 1} // 中心位置（第2个位置）
              });
            }
          }
          count = 1;
          currentColor = this.grid[i][j];
          startCol = j;
        }
      }
      
      // 检查行末尾
      if (count >= 3 && currentColor < COLORS.length) {
        const matchPositions = [];
        for (let k = startCol; k < startCol + count; k++) {
          matchPositions.push({row: i, col: k});
        }
        matches.push(...matchPositions);
        
        if (count === 4) {
          fourMatches.push({
            type: 'horizontal',
            positions: matchPositions,
            centerPos: {row: i, col: startCol + 1}
          });
        }
      }
    }
    
    // 检查垂直消除
    for (let j = 0; j < GRID_SIZE; j++) {
      let count = 1;
      let currentColor = this.grid[0][j];
      let startRow = 0;
      
      for (let i = 1; i < GRID_SIZE; i++) {
        if (this.grid[i][j] === currentColor && currentColor < COLORS.length) {
          count++;
        } else {
          if (count >= 3 && currentColor < COLORS.length) {
            const matchPositions = [];
            for (let k = startRow; k < startRow + count; k++) {
              matchPositions.push({row: k, col: j});
            }
            matches.push(...matchPositions);
            
            if (count === 4) {
              fourMatches.push({
                type: 'vertical',
                positions: matchPositions,
                centerPos: {row: startRow + 1, col: j}
              });
            }
          }
          count = 1;
          currentColor = this.grid[i][j];
          startRow = i;
        }
      }
      
      // 检查列末尾
      if (count >= 3 && currentColor < COLORS.length) {
        const matchPositions = [];
        for (let k = startRow; k < startRow + count; k++) {
          matchPositions.push({row: k, col: j});
        }
        matches.push(...matchPositions);
        
        if (count === 4) {
          fourMatches.push({
            type: 'vertical',
            positions: matchPositions,
            centerPos: {row: startRow + 1, col: j}
          });
        }
      }
    }
    
    return { matches, fourMatches };
  }
  
  // 绑定触摸事件
  bindEvents() {
    this.canvas.addEventListener('touchstart', (e) => {
      if (this.isAnimating) return;
      
      const touch = e.touches[0];
      const rect = this.canvas.getBoundingClientRect();
      const x = touch.clientX - rect.left;
      const y = touch.clientY - rect.top;
      
      this.handleTouch(x, y);
    });
  }
  
  // 处理触摸事件
  handleTouch(x, y) {
    const col = Math.floor((x - this.offsetX) / CELL_SIZE);
    const row = Math.floor((y - this.offsetY) / CELL_SIZE);
    
    // 检查点击是否在游戏区域内
    if (row >= 0 && row < GRID_SIZE && col >= 0 && col < GRID_SIZE) {
      // 检查是否点击了炮竹
      if (this.grid[row][col] === SPECIAL_GEMS.FIRECRACKER) {
        // 直接触发炮竹爆炸
        this.triggerFirecracker(row, col);
        this.selectedCell = null;
        return;
      }
      
      if (!this.selectedCell) {
        // 第一次点击，选择宝石（但不能选择炮竹）
        if (this.grid[row][col] !== SPECIAL_GEMS.FIRECRACKER) {
          this.selectedCell = {row, col};
        }
      } else {
        // 第二次点击，尝试交换
        if (this.isAdjacent(this.selectedCell, {row, col})) {
          this.swapGems(this.selectedCell, {row, col});
        }
        this.selectedCell = null;
      }
    } else {
      this.selectedCell = null;
    }
  }
  
  // 检查两个位置是否相邻
  isAdjacent(pos1, pos2) {
    const rowDiff = Math.abs(pos1.row - pos2.row);
    const colDiff = Math.abs(pos1.col - pos2.col);
    return (rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1);
  }
  
  // 检查交换是否会产生消除
  canSwap(pos1, pos2) {
    // 炮竹不参与交换
    const gem1 = this.grid[pos1.row][pos1.col];
    const gem2 = this.grid[pos2.row][pos2.col];
    
    if (gem1 === SPECIAL_GEMS.FIRECRACKER || gem2 === SPECIAL_GEMS.FIRECRACKER) {
      return false;
    }
    
    // 保存原始值
    this.grid[pos1.row][pos1.col] = gem2;
    this.grid[pos2.row][pos2.col] = gem1;
    
    // 检查是否有消除
    const result = this.findMatches();
    const canSwap = result.matches.length > 0;
    
    // 恢复原始状态
    this.grid[pos1.row][pos1.col] = gem1;
    this.grid[pos2.row][pos2.col] = gem2;
    
    return canSwap;
  }
  
  // 交换两个宝石
  async swapGems(pos1, pos2) {
    // 先检查交换是否有效
    if (!this.canSwap(pos1, pos2)) {
      // 不能交换，可以添加一个视觉反馈
      this.showInvalidSwap(pos1, pos2);
      return;
    }
    
    // 开始交换动画
    this.isAnimating = true;
    await this.animateSwap(pos1, pos2);
    
    // 动画完成后执行实际交换
    const temp = this.grid[pos1.row][pos1.col];
    this.grid[pos1.row][pos1.col] = this.grid[pos2.row][pos2.col];
    this.grid[pos2.row][pos2.col] = temp;
    
    // 开始处理消除
    this.processMatches();
  }
  
  // 触发炮竹爆炸
  async triggerFirecracker(row, col) {
    if (this.isAnimating) return;
    
    this.isAnimating = true;
    
    // 检查是否有其他炮竹相邻，如果有则触发增强效果
    const adjacentFirecrackers = this.getAdjacentFirecrackers(row, col);
    
    if (adjacentFirecrackers.length > 0) {
      // 有相邻炮竹，触发增强效果
      await this.explodeEnhancedFirecracker({row, col});
      // 同时引爆相邻的炮竹
      for (const pos of adjacentFirecrackers) {
        await this.explodeFirecracker(pos);
      }
    } else {
      // 普通炮竹爆炸
      await this.explodeFirecracker({row, col});
    }
    
    // 爆炸完成后，处理下落和填充
    await this.animateDropGems();
    this.fillNewGems();
    await this.wait(200);
    
    // 继续处理常规消除
    await this.processMatches();
  }
  
  // 获取相邻的炮竹
  getAdjacentFirecrackers(row, col) {
    const adjacent = [];
    const directions = [[-1,0], [1,0], [0,-1], [0,1]];
    
    for (const [dr, dc] of directions) {
      const newRow = row + dr;
      const newCol = col + dc;
      
      if (newRow >= 0 && newRow < GRID_SIZE && 
          newCol >= 0 && newCol < GRID_SIZE &&
          this.grid[newRow][newCol] === SPECIAL_GEMS.FIRECRACKER) {
        adjacent.push({row: newRow, col: newCol});
      }
    }
    
    return adjacent;
  }
  
  // 交换动画
  animateSwap(pos1, pos2) {
    return new Promise(resolve => {
      const startX1 = this.offsetX + pos1.col * CELL_SIZE + CELL_SIZE / 2;
      const startY1 = this.offsetY + pos1.row * CELL_SIZE + CELL_SIZE / 2;
      const startX2 = this.offsetX + pos2.col * CELL_SIZE + CELL_SIZE / 2;
      const startY2 = this.offsetY + pos2.row * CELL_SIZE + CELL_SIZE / 2;
      
      const gem1 = this.grid[pos1.row][pos1.col];
      const gem2 = this.grid[pos2.row][pos2.col];
      
      // 创建交换动画对象
      this.swappingGems = [
        {
          gem: gem1,
          fromRow: pos1.row,
          fromCol: pos1.col,
          toRow: pos2.row,
          toCol: pos2.col,
          currentX: startX1,
          currentY: startY1,
          targetX: startX2,
          targetY: startY2,
          progress: 0
        },
        {
          gem: gem2,
          fromRow: pos2.row,
          fromCol: pos2.col,
          toRow: pos1.row,
          toCol: pos1.col,
          currentX: startX2,
          currentY: startY2,
          targetX: startX1,
          targetY: startY1,
          progress: 0
        }
      ];
      
      const animationDuration = 300; // 300毫秒
      const startTime = Date.now();
      
      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / animationDuration, 1);
        
        // 使用easeInOutQuad缓动函数
        const easeProgress = progress < 0.5 
          ? 2 * progress * progress 
          : 1 - Math.pow(-2 * progress + 2, 2) / 2;
        
        this.swappingGems.forEach(swapGem => {
          swapGem.progress = easeProgress;
          swapGem.currentX = swapGem.targetX * easeProgress + 
                            (this.offsetX + swapGem.fromCol * CELL_SIZE + CELL_SIZE / 2) * (1 - easeProgress);
          swapGem.currentY = swapGem.targetY * easeProgress + 
                            (this.offsetY + swapGem.fromRow * CELL_SIZE + CELL_SIZE / 2) * (1 - easeProgress);
        });
        
        if (progress >= 1) {
          this.swappingGems = [];
          resolve();
        } else {
          requestAnimationFrame(animate);
        }
      };
      
      animate();
    });
  }
  
  // 显示无效交换的视觉反馈
  showInvalidSwap(pos1, pos2) {
    // 设置无效交换效果
    this.invalidSwapEffect = {
      positions: [pos1, pos2],
      startTime: Date.now(),
      duration: 600 // 持续600毫秒
    };
    
    console.log('无效交换：无法产生消除');
  }
  
  // 创建爆炸粒子效果
  createExplosion(row, col, color) {
    const centerX = this.offsetX + col * CELL_SIZE + CELL_SIZE / 2;
    const centerY = this.offsetY + row * CELL_SIZE + CELL_SIZE / 2;
    
    // 创建多个粒子
    for (let i = 0; i < 15; i++) {
      this.particles.push({
        x: centerX,
        y: centerY,
        vx: (Math.random() - 0.5) * 8, // 随机水平速度
        vy: (Math.random() - 0.5) * 8, // 随机垂直速度
        life: 1.0, // 生命值
        decay: 0.02 + Math.random() * 0.02, // 衰减速度
        color: color,
        size: 2 + Math.random() * 4 // 粒子大小
      });
    }
  }
  
  // 处理消除
  async processMatches() {
    while (true) {
      const result = this.findMatches();
      const { matches, fourMatches } = result;
      
      if (matches.length === 0) break;
      
      // 增加分数
      this.score += matches.length * 10;
      
      // 检查被消除的位置是否有炮竹，如果有则触发爆炸
      const firecrackerPositions = [];
      matches.forEach(({row, col}) => {
        if (this.grid[row][col] === SPECIAL_GEMS.FIRECRACKER) {
          firecrackerPositions.push({row, col});
        }
      });
      
      // 处理4连消除，生成炮竹
      fourMatches.forEach(fourMatch => {
        const centerPos = fourMatch.centerPos;
        // 先消除原来的宝石，然后在中心生成炮竹
        this.grid[centerPos.row][centerPos.col] = SPECIAL_GEMS.FIRECRACKER;
        console.log(`在位置 (${centerPos.row}, ${centerPos.col}) 生成炮竹！`);
      });
      
      // 为每个被消除的宝石创建爆炸效果
      matches.forEach(({row, col}) => {
        // 跳过即将变成炮竹的位置和已经是炮竹的位置
        const willBeFirecracker = fourMatches.some(fm => 
          fm.centerPos.row === row && fm.centerPos.col === col
        );
        const isFirecracker = this.grid[row][col] === SPECIAL_GEMS.FIRECRACKER;
        
        if (!willBeFirecracker && !isFirecracker) {
          const gemColor = this.grid[row][col] < COLORS.length ? 
                          COLORS[this.grid[row][col]] : '#FFD700';
          this.createExplosion(row, col, gemColor);
          this.grid[row][col] = -1; // 标记为空
        }
      });
      
      // 等待爆炸效果显示
      await this.wait(500);
      
      // 触发被消除的炮竹
      for (const pos of firecrackerPositions) {
        await this.explodeFirecracker(pos);
      }
      
      // 开始下落动画
      await this.animateDropGems();
      
      // 填充新宝石
      this.fillNewGems();
      
      // 等待一小段时间再检查下一轮消除
      await this.wait(200);
    }
    
    this.isAnimating = false;
  }
  
  // 动画化宝石下落
  async animateDropGems() {
    // 计算每列需要下落的宝石
    this.fallingGems = [];
    
    for (let col = 0; col < GRID_SIZE; col++) {
      const columnGems = [];
      let emptySpaces = 0;
      
      // 从下往上扫描
      for (let row = GRID_SIZE - 1; row >= 0; row--) {
        if (this.grid[row][col] === -1) {
          emptySpaces++;
        } else if (emptySpaces > 0) {
          // 这个宝石需要下落
          columnGems.push({
            fromRow: row,
            toRow: row + emptySpaces,
            col: col,
            gem: this.grid[row][col],
            currentY: this.offsetY + row * CELL_SIZE,
            targetY: this.offsetY + (row + emptySpaces) * CELL_SIZE,
            speed: 0
          });
          this.grid[row][col] = -1; // 清空原位置
        }
      }
      
      this.fallingGems.push(...columnGems);
    }
    
    // 如果没有需要下落的宝石，直接返回
    if (this.fallingGems.length === 0) return;
    
    // 执行下落动画
    return new Promise(resolve => {
      const animateFall = () => {
        let allFinished = true;
        
        this.fallingGems.forEach(gem => {
          if (gem.currentY < gem.targetY) {
            // 增加下落速度（重力加速度效果）
            gem.speed += 0.8;
            gem.currentY += gem.speed;
            
            // 防止超过目标位置
            if (gem.currentY >= gem.targetY) {
              gem.currentY = gem.targetY;
              // 放置到最终位置
              this.grid[gem.toRow][gem.col] = gem.gem;
            } else {
              allFinished = false;
            }
          }
        });
        
        if (allFinished) {
          this.fallingGems = [];
          resolve();
        } else {
          requestAnimationFrame(animateFall);
        }
      };
      
      animateFall();
    });
  }
  
  // 等待函数
  wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  // 填充新宝石
  fillNewGems() {
    for (let col = 0; col < GRID_SIZE; col++) {
      for (let row = 0; row < GRID_SIZE; row++) {
        if (this.grid[row][col] === -1) {
          this.grid[row][col] = this.getRandomGem();
        }
      }
    }
  }
  
  // 移除旧的炮竹交换处理函数
  // handleFirecrackerSwap 函数已移除，因为炮竹现在是点击触发
  
  // 炮竹爆炸
  async explodeFirecracker(pos) {
    // 移除炮竹
    this.grid[pos.row][pos.col] = -1;
    
    // 创建爆炸粒子效果
    this.createExplosion(pos.row, pos.col, '#FFD700');
    
    // 等待爆炸效果
    await this.wait(300);
    
    // 随机选择4个位置放置小炮竹
    const targets = this.getRandomPositions(4);
    
    if (targets.length > 0) {
      // 创建小炮竹飞行效果
      await this.createMiniFirecrackerEffect(pos, targets, false);
      
      // 消除目标位置的宝石
      targets.forEach(target => {
        if (this.grid[target.row] && this.grid[target.row][target.col] !== undefined && this.grid[target.row][target.col] !== -1) {
          const gemColor = this.grid[target.row][target.col] < COLORS.length ? 
                          COLORS[this.grid[target.row][target.col]] : '#FFD700';
          this.createExplosion(target.row, target.col, gemColor);
          this.grid[target.row][target.col] = -1;
          this.score += 20; // 额外分数
        }
      });
      
      // 等待目标爆炸效果
      await this.wait(300);
    }
  }
  
  // 增强炮竹爆炸（炮竹+炮竹）
  async explodeEnhancedFirecracker(pos) {
    // 移除炮竹
    this.grid[pos.row][pos.col] = -1;
    
    // 创建更大的爆炸效果
    this.createBigExplosion(pos.row, pos.col);
    
    await this.wait(400);
    
    // 第一轮：4个小炮竹
    const firstTargets = this.getRandomPositions(4);
    if (firstTargets.length > 0) {
      await this.createMiniFirecrackerEffect(pos, firstTargets, true);
      
      // 消除第一轮目标
      firstTargets.forEach(target => {
        if (this.grid[target.row] && this.grid[target.row][target.col] !== undefined && this.grid[target.row][target.col] !== -1) {
          const gemColor = this.grid[target.row][target.col] < COLORS.length ? 
                          COLORS[this.grid[target.row][target.col]] : '#FFD700';
          this.createExplosion(target.row, target.col, gemColor);
          this.grid[target.row][target.col] = -1;
          this.score += 30;
        }
      });
      
      await this.wait(300);
      
      // 第二轮：每个第一轮位置再分裂成3个
      for (const firstTarget of firstTargets) {
        const secondTargets = this.getRandomPositions(3);
        if (secondTargets.length > 0) {
          await this.createMiniFirecrackerEffect(firstTarget, secondTargets, false);
          
          secondTargets.forEach(target => {
            if (this.grid[target.row] && this.grid[target.row][target.col] !== undefined && this.grid[target.row][target.col] !== -1) {
              const gemColor = this.grid[target.row][target.col] < COLORS.length ? 
                              COLORS[this.grid[target.row][target.col]] : '#FFD700';
              this.createExplosion(target.row, target.col, gemColor);
              this.grid[target.row][target.col] = -1;
              this.score += 15;
            }
          });
          
          await this.wait(200);
        }
      }
    }
  }
  
  // 获取随机位置
  getRandomPositions(count) {
    const positions = [];
    const attempts = count * 3; // 防止无限循环
    
    for (let i = 0; i < attempts && positions.length < count; i++) {
      const row = Math.floor(Math.random() * GRID_SIZE);
      const col = Math.floor(Math.random() * GRID_SIZE);
      
      // 确保位置有宝石且不重复
      if (this.grid[row][col] !== -1 && 
          !positions.some(pos => pos.row === row && pos.col === col)) {
        positions.push({row, col});
      }
    }
    
    return positions;
  }
  
  // 创建小炮竹飞行效果
  async createMiniFirecrackerEffect(startPos, targets, enhanced) {
    if (targets.length === 0) return;
    
    const startTime = Date.now();
    const duration = 800; // 增加持续时间让动画更明显
    
    const effects = targets.map(target => ({
      startX: this.offsetX + startPos.col * CELL_SIZE + CELL_SIZE / 2,
      startY: this.offsetY + startPos.row * CELL_SIZE + CELL_SIZE / 2,
      targetX: this.offsetX + target.col * CELL_SIZE + CELL_SIZE / 2,
      targetY: this.offsetY + target.row * CELL_SIZE + CELL_SIZE / 2,
      currentX: this.offsetX + startPos.col * CELL_SIZE + CELL_SIZE / 2,
      currentY: this.offsetY + startPos.row * CELL_SIZE + CELL_SIZE / 2,
      enhanced: enhanced,
      active: true
    }));
    
    this.firecrackerEffects = effects;
    
    return new Promise(resolve => {
      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // 使用缓动函数
        const easeProgress = progress < 0.5 
          ? 2 * progress * progress 
          : 1 - Math.pow(-2 * progress + 2, 2) / 2;
        
        effects.forEach(effect => {
          if (effect.active) {
            effect.currentX = effect.startX + (effect.targetX - effect.startX) * easeProgress;
            effect.currentY = effect.startY + (effect.targetY - effect.startY) * easeProgress;
          }
        });
        
        if (progress >= 1) {
          this.firecrackerEffects = [];
          resolve();
        } else {
          requestAnimationFrame(animate);
        }
      };
      
      animate();
    });
  }
  
  // 创建大爆炸效果
  createBigExplosion(row, col) {
    const centerX = this.offsetX + col * CELL_SIZE + CELL_SIZE / 2;
    const centerY = this.offsetY + row * CELL_SIZE + CELL_SIZE / 2;
    
    // 创建更多粒子
    for (let i = 0; i < 30; i++) {
      this.particles.push({
        x: centerX,
        y: centerY,
        vx: (Math.random() - 0.5) * 12,
        vy: (Math.random() - 0.5) * 12,
        life: 1.0,
        decay: 0.015 + Math.random() * 0.015,
        color: '#FFD700',
        size: 3 + Math.random() * 6
      });
    }
  }
  
  // 更新粒子系统
  updateParticles() {
    for (let i = this.particles.length - 1; i >= 0; i--) {
      const particle = this.particles[i];
      
      // 更新位置
      particle.x += particle.vx;
      particle.y += particle.vy;
      
      // 添加重力效果
      particle.vy += 0.2;
      
      // 减少生命值
      particle.life -= particle.decay;
      
      // 移除死亡的粒子
      if (particle.life <= 0) {
        this.particles.splice(i, 1);
      }
    }
  }
  
  // 绘制粒子
  drawParticles() {
    this.particles.forEach(particle => {
      this.ctx.save();
      this.ctx.globalAlpha = particle.life;
      this.ctx.fillStyle = particle.color;
      this.ctx.beginPath();
      this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
      this.ctx.fill();
      this.ctx.restore();
    });
  }
  
  // 渲染游戏
  render() {
    // 清空画布
    this.ctx.fillStyle = '#2C3E50';
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    
    // 绘制标题
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = '32px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('消消乐', this.canvas.width / 2, 50);
    
    // 绘制分数
    this.ctx.font = '24px Arial';
    this.ctx.fillText(`分数: ${this.score}`, this.canvas.width / 2, 90);
    
    // 绘制游戏网格
    this.drawGrid();
    
    // 绘制粒子效果
    this.drawParticles();
  }
  
  // 绘制游戏网格
  drawGrid() {
    for (let i = 0; i < GRID_SIZE; i++) {
      for (let j = 0; j < GRID_SIZE; j++) {
        const x = this.offsetX + j * CELL_SIZE;
        const y = this.offsetY + i * CELL_SIZE;
        
        // 绘制宝石背景
        this.ctx.fillStyle = '#34495E';
        this.ctx.fillRect(x, y, CELL_SIZE, CELL_SIZE);
        
        // 绘制边框
        this.ctx.strokeStyle = '#2C3E50';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(x, y, CELL_SIZE, CELL_SIZE);
        
        // 检查是否是正在交换或下落的宝石
        const isSwapping = this.swappingGems.some(swapGem => 
          (swapGem.fromRow === i && swapGem.fromCol === j) || 
          (swapGem.toRow === i && swapGem.toCol === j)
        );
        
        const isFalling = this.fallingGems.some(gem => 
          gem.fromRow === i && gem.col === j && gem.currentY !== gem.targetY
        );
        
        // 绘制宝石（跳过正在交换或下落的宝石）
        if (this.grid[i][j] !== -1 && !isSwapping && !isFalling) {
          if (this.grid[i][j] === SPECIAL_GEMS.FIRECRACKER) {
            this.drawFirecracker(x + CELL_SIZE/2, y + CELL_SIZE/2);
          } else {
            this.drawGem(x + CELL_SIZE/2, y + CELL_SIZE/2, COLORS[this.grid[i][j]]);
          }
        }
        
        // 高亮选中的宝石（但不高亮正在交换的宝石）
        if (this.selectedCell && this.selectedCell.row === i && this.selectedCell.col === j && !isSwapping) {
          this.ctx.strokeStyle = '#F39C12';
          this.ctx.lineWidth = 4;
          this.ctx.strokeRect(x, y, CELL_SIZE, CELL_SIZE);
        }
        
        // 显示无效交换效果
        if (this.invalidSwapEffect) {
          const elapsed = Date.now() - this.invalidSwapEffect.startTime;
          if (elapsed < this.invalidSwapEffect.duration) {
            // 检查当前位置是否是无效交换的位置
            const isInvalidPos = this.invalidSwapEffect.positions.some(pos => 
              pos.row === i && pos.col === j
            );
            
            if (isInvalidPos) {
              // 红色闪烁效果
              const alpha = 0.5 + 0.5 * Math.sin(elapsed * 0.02);
              this.ctx.strokeStyle = `rgba(231, 76, 60, ${alpha})`;
              this.ctx.lineWidth = 6;
              this.ctx.strokeRect(x - 2, y - 2, CELL_SIZE + 4, CELL_SIZE + 4);
            }
          } else {
            // 效果结束，清除
            this.invalidSwapEffect = null;
          }
        }
      }
    }
    
    // 绘制交换中的宝石
    this.swappingGems.forEach(swapGem => {
      if (swapGem.gem === SPECIAL_GEMS.FIRECRACKER) {
        this.drawFirecracker(swapGem.currentX, swapGem.currentY);
      } else {
        this.drawGem(swapGem.currentX, swapGem.currentY, COLORS[swapGem.gem]);
      }
    });
    
    // 绘制下落中的宝石
    this.fallingGems.forEach(gem => {
      const x = this.offsetX + gem.col * CELL_SIZE + CELL_SIZE/2;
      if (gem.gem === SPECIAL_GEMS.FIRECRACKER) {
        this.drawFirecracker(x, gem.currentY + CELL_SIZE/2);
      } else {
        this.drawGem(x, gem.currentY + CELL_SIZE/2, COLORS[gem.gem]);
      }
    });
    
    // 绘制炮竹飞行效果
    this.firecrackerEffects.forEach(effect => {
      if (effect.active) {
        this.ctx.save();
        
        // 绘制小炮竹本体
        this.ctx.fillStyle = effect.enhanced ? '#FF6347' : '#FFD700';
        this.ctx.beginPath();
        this.ctx.arc(effect.currentX, effect.currentY, 6, 0, Math.PI * 2);
        this.ctx.fill();
        
        // 绘制边框
        this.ctx.strokeStyle = effect.enhanced ? '#CD5C5C' : '#DAA520';
        this.ctx.lineWidth = 2;
        this.ctx.stroke();
        
        // 添加尾迹效果
        this.ctx.fillStyle = effect.enhanced ? 'rgba(255, 99, 71, 0.4)' : 'rgba(255, 215, 0, 0.4)';
        this.ctx.beginPath();
        this.ctx.arc(effect.currentX - 8, effect.currentY, 3, 0, Math.PI * 2);
        this.ctx.fill();
        
        this.ctx.beginPath();
        this.ctx.arc(effect.currentX - 14, effect.currentY, 2, 0, Math.PI * 2);
        this.ctx.fill();
        
        // 火花效果
        this.ctx.fillStyle = '#FF4500';
        this.ctx.beginPath();
        this.ctx.arc(effect.currentX + 2, effect.currentY - 2, 1, 0, Math.PI * 2);
        this.ctx.fill();
        
        this.ctx.restore();
      }
    });
  }
  
  // 绘制单个宝石
  drawGem(centerX, centerY, color) {
    this.ctx.fillStyle = color;
    this.ctx.beginPath();
    this.ctx.arc(centerX, centerY, CELL_SIZE/2 - 4, 0, Math.PI * 2);
    this.ctx.fill();
    
    // 添加光泽效果
    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
    this.ctx.beginPath();
    this.ctx.arc(centerX - 8, centerY - 8, 8, 0, Math.PI * 2);
    this.ctx.fill();
  }
  
  // 绘制炮竹
  drawFirecracker(centerX, centerY) {
    // 炮竹主体 - 金色圆柱
    this.ctx.fillStyle = '#FFD700';
    this.ctx.fillRect(centerX - 8, centerY - 15, 16, 30);
    
    // 炮竹顶部导火线
    this.ctx.fillStyle = '#8B4513';
    this.ctx.fillRect(centerX - 2, centerY - 20, 4, 8);
    
    // 火花效果
    this.ctx.fillStyle = '#FF4500';
    this.ctx.beginPath();
    this.ctx.arc(centerX, centerY - 18, 3, 0, Math.PI * 2);
    this.ctx.fill();
    
    // 边框
    this.ctx.strokeStyle = '#B8860B';
    this.ctx.lineWidth = 2;
    this.ctx.strokeRect(centerX - 8, centerY - 15, 16, 30);
    
    // 装饰线条
    this.ctx.strokeStyle = '#CD853F';
    this.ctx.lineWidth = 1;
    this.ctx.beginPath();
    this.ctx.moveTo(centerX - 6, centerY - 10);
    this.ctx.lineTo(centerX + 6, centerY - 10);
    this.ctx.moveTo(centerX - 6, centerY);
    this.ctx.lineTo(centerX + 6, centerY);
    this.ctx.moveTo(centerX - 6, centerY + 10);
    this.ctx.lineTo(centerX + 6, centerY + 10);
    this.ctx.stroke();
  }
  
  // 游戏主循环
  gameLoop() {
    // 更新粒子系统
    this.updateParticles();
    
    this.render();
    requestAnimationFrame(() => this.gameLoop());
  }
}
